{"ast":null,"code":"'use strict';\n\nmodule.exports = wrap;\n\nvar u = require('unist-builder'); // Wrap `nodes` with line feeds between each entry.\n// Optionally adds line feeds at the start and end.\n\n\nfunction wrap(nodes, loose) {\n  var result = [];\n  var index = -1;\n  var length = nodes.length;\n\n  if (loose) {\n    result.push(u('text', '\\n'));\n  }\n\n  while (++index < length) {\n    if (index) {\n      result.push(u('text', '\\n'));\n    }\n\n    result.push(nodes[index]);\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push(u('text', '\\n'));\n  }\n\n  return result;\n}","map":{"version":3,"sources":["/home/bian/Desktop/Summer/a/client/node_modules/mdast-util-to-hast/lib/wrap.js"],"names":["module","exports","wrap","u","require","nodes","loose","result","index","length","push"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,IAAjB;;AAEA,IAAIC,CAAC,GAAGC,OAAO,CAAC,eAAD,CAAf,C,CAEA;AACA;;;AACA,SAASF,IAAT,CAAcG,KAAd,EAAqBC,KAArB,EAA4B;AAC1B,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,KAAK,GAAG,CAAC,CAAb;AACA,MAAIC,MAAM,GAAGJ,KAAK,CAACI,MAAnB;;AAEA,MAAIH,KAAJ,EAAW;AACTC,IAAAA,MAAM,CAACG,IAAP,CAAYP,CAAC,CAAC,MAAD,EAAS,IAAT,CAAb;AACD;;AAED,SAAO,EAAEK,KAAF,GAAUC,MAAjB,EAAyB;AACvB,QAAID,KAAJ,EAAW;AACTD,MAAAA,MAAM,CAACG,IAAP,CAAYP,CAAC,CAAC,MAAD,EAAS,IAAT,CAAb;AACD;;AAEDI,IAAAA,MAAM,CAACG,IAAP,CAAYL,KAAK,CAACG,KAAD,CAAjB;AACD;;AAED,MAAIF,KAAK,IAAID,KAAK,CAACI,MAAN,GAAe,CAA5B,EAA+B;AAC7BF,IAAAA,MAAM,CAACG,IAAP,CAAYP,CAAC,CAAC,MAAD,EAAS,IAAT,CAAb;AACD;;AAED,SAAOI,MAAP;AACD","sourcesContent":["'use strict'\n\nmodule.exports = wrap\n\nvar u = require('unist-builder')\n\n// Wrap `nodes` with line feeds between each entry.\n// Optionally adds line feeds at the start and end.\nfunction wrap(nodes, loose) {\n  var result = []\n  var index = -1\n  var length = nodes.length\n\n  if (loose) {\n    result.push(u('text', '\\n'))\n  }\n\n  while (++index < length) {\n    if (index) {\n      result.push(u('text', '\\n'))\n    }\n\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push(u('text', '\\n'))\n  }\n\n  return result\n}\n"]},"metadata":{},"sourceType":"script"}