{"ast":null,"code":"'use strict';\n\nmodule.exports = all;\n\nvar one = require('./one');\n\nfunction all(h, parent) {\n  var nodes = parent.children || [];\n  var length = nodes.length;\n  var values = [];\n  var index = -1;\n  var result;\n  var head;\n\n  while (++index < length) {\n    result = one(h, nodes[index], parent);\n\n    if (result) {\n      if (index && nodes[index - 1].type === 'break') {\n        if (result.value) {\n          result.value = result.value.replace(/^\\s+/, '');\n        }\n\n        head = result.children && result.children[0];\n\n        if (head && head.value) {\n          head.value = head.value.replace(/^\\s+/, '');\n        }\n      }\n\n      values = values.concat(result);\n    }\n  }\n\n  return values;\n}","map":{"version":3,"sources":["/home/bian/Desktop/Summer/a/node_modules/mdast-util-to-hast/lib/all.js"],"names":["module","exports","all","one","require","h","parent","nodes","children","length","values","index","result","head","type","value","replace","concat"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,GAAjB;;AAEA,IAAIC,GAAG,GAAGC,OAAO,CAAC,OAAD,CAAjB;;AAEA,SAASF,GAAT,CAAaG,CAAb,EAAgBC,MAAhB,EAAwB;AACtB,MAAIC,KAAK,GAAGD,MAAM,CAACE,QAAP,IAAmB,EAA/B;AACA,MAAIC,MAAM,GAAGF,KAAK,CAACE,MAAnB;AACA,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,KAAK,GAAG,CAAC,CAAb;AACA,MAAIC,MAAJ;AACA,MAAIC,IAAJ;;AAEA,SAAO,EAAEF,KAAF,GAAUF,MAAjB,EAAyB;AACvBG,IAAAA,MAAM,GAAGT,GAAG,CAACE,CAAD,EAAIE,KAAK,CAACI,KAAD,CAAT,EAAkBL,MAAlB,CAAZ;;AAEA,QAAIM,MAAJ,EAAY;AACV,UAAID,KAAK,IAAIJ,KAAK,CAACI,KAAK,GAAG,CAAT,CAAL,CAAiBG,IAAjB,KAA0B,OAAvC,EAAgD;AAC9C,YAAIF,MAAM,CAACG,KAAX,EAAkB;AAChBH,UAAAA,MAAM,CAACG,KAAP,GAAeH,MAAM,CAACG,KAAP,CAAaC,OAAb,CAAqB,MAArB,EAA6B,EAA7B,CAAf;AACD;;AAEDH,QAAAA,IAAI,GAAGD,MAAM,CAACJ,QAAP,IAAmBI,MAAM,CAACJ,QAAP,CAAgB,CAAhB,CAA1B;;AAEA,YAAIK,IAAI,IAAIA,IAAI,CAACE,KAAjB,EAAwB;AACtBF,UAAAA,IAAI,CAACE,KAAL,GAAaF,IAAI,CAACE,KAAL,CAAWC,OAAX,CAAmB,MAAnB,EAA2B,EAA3B,CAAb;AACD;AACF;;AAEDN,MAAAA,MAAM,GAAGA,MAAM,CAACO,MAAP,CAAcL,MAAd,CAAT;AACD;AACF;;AAED,SAAOF,MAAP;AACD","sourcesContent":["'use strict'\n\nmodule.exports = all\n\nvar one = require('./one')\n\nfunction all(h, parent) {\n  var nodes = parent.children || []\n  var length = nodes.length\n  var values = []\n  var index = -1\n  var result\n  var head\n\n  while (++index < length) {\n    result = one(h, nodes[index], parent)\n\n    if (result) {\n      if (index && nodes[index - 1].type === 'break') {\n        if (result.value) {\n          result.value = result.value.replace(/^\\s+/, '')\n        }\n\n        head = result.children && result.children[0]\n\n        if (head && head.value) {\n          head.value = head.value.replace(/^\\s+/, '')\n        }\n      }\n\n      values = values.concat(result)\n    }\n  }\n\n  return values\n}\n"]},"metadata":{},"sourceType":"script"}