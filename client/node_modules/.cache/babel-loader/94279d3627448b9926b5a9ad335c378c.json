{"ast":null,"code":"/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {Root['children'][number]} Child\n * @typedef {Child|Root} Node\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n *\n * @typedef {Root|Element} HResult\n * @typedef {string|number} HStyleValue\n * @typedef {Object.<string, HStyleValue>} HStyle\n * @typedef {string|number|boolean|null|undefined} HPrimitiveValue\n * @typedef {Array.<string|number>} HArrayValue\n * @typedef {HPrimitiveValue|HArrayValue} HPropertyValue\n * @typedef {{[property: string]: HPropertyValue|HStyle}} HProperties\n *\n * @typedef {string|number|null|undefined} HPrimitiveChild\n * @typedef {Array.<Node|HPrimitiveChild>} HArrayChild\n * @typedef {Node|HPrimitiveChild|HArrayChild} HChild\n */\nimport { find, normalize } from 'property-information';\nimport { parseSelector } from 'hast-util-parse-selector';\nimport { parse as spaces } from 'space-separated-tokens';\nimport { parse as commas } from 'comma-separated-tokens';\nvar buttonTypes = new Set(['menu', 'submit', 'reset', 'button']);\nvar own = {}.hasOwnProperty;\n/**\n * @param {Schema} schema\n * @param {string} defaultTagName\n * @param {Array.<string>} [caseSensitive]\n */\n\nexport function core(schema, defaultTagName, caseSensitive) {\n  var adjust = caseSensitive && createAdjustMap(caseSensitive);\n\n  const h =\n  /**\n   * @type {{\n   *   (): Root\n   *   (selector: null|undefined, ...children: HChild[]): Root\n   *   (selector: string, properties: HProperties, ...children: HChild[]): Element\n   *   (selector: string, ...children: HChild[]): Element\n   * }}\n   */\n\n  /**\n   * Hyperscript compatible DSL for creating virtual hast trees.\n   *\n   * @param {string|null} [selector]\n   * @param {HProperties|HChild} [properties]\n   * @param {HChild[]} children\n   * @returns {HResult}\n   */\n  function (selector, properties, ...children) {\n    var index = -1;\n    /** @type {HResult} */\n\n    var node;\n    /** @type {string} */\n\n    var key;\n\n    if (selector === undefined || selector === null) {\n      node = {\n        type: 'root',\n        children: []\n      }; // @ts-ignore Properties are not supported for roots.\n\n      children.unshift(properties);\n    } else {\n      node = parseSelector(selector, defaultTagName); // Normalize the name.\n\n      node.tagName = node.tagName.toLowerCase();\n\n      if (adjust && own.call(adjust, node.tagName)) {\n        node.tagName = adjust[node.tagName];\n      } // Handle props.\n\n\n      if (isProperties(properties, node.tagName)) {\n        for (key in properties) {\n          if (own.call(properties, key)) {\n            // @ts-ignore `node.properties` is set.\n            addProperty(schema, node.properties, key, properties[key]);\n          }\n        }\n      } else {\n        children.unshift(properties);\n      }\n    } // Handle children.\n\n\n    while (++index < children.length) {\n      addChild(node.children, children[index]);\n    }\n\n    if (node.tagName === 'template') {\n      node.content = {\n        type: 'root',\n        children: node.children\n      };\n      node.children = [];\n    }\n\n    return node;\n  };\n\n  return h;\n}\n/**\n * @param {HProperties|HChild} value\n * @param {string} name\n * @returns {value is HProperties}\n */\n\nfunction isProperties(value, name) {\n  if (value === null || value === undefined || typeof value !== 'object' || Array.isArray(value)) {\n    return false;\n  }\n\n  if (name === 'input' || !value.type || typeof value.type !== 'string') {\n    return true;\n  }\n\n  if (Array.isArray(value.children)) {\n    return false;\n  }\n\n  if (name === 'button') {\n    return buttonTypes.has(value.type.toLowerCase());\n  }\n\n  return !('value' in value);\n}\n/**\n * @param {Schema} schema\n * @param {Properties} properties\n * @param {string} key\n * @param {HStyle|HPropertyValue} value\n * @returns {void}\n */\n\n\nfunction addProperty(schema, properties, key, value) {\n  var info = find(schema, key);\n  var index = -1;\n  /** @type {HPropertyValue} */\n\n  var result;\n  /** @type {Array.<string|number>} */\n\n  var finalResult; // Ignore nullish and NaN values.\n\n  if (value === undefined || value === null) return;\n\n  if (typeof value === 'number') {\n    // Ignore NaN.\n    if (Number.isNaN(value)) return;\n    result = value;\n  } // Booleans.\n  else if (typeof value === 'boolean') {\n      result = value;\n    } // Handle list values.\n    else if (typeof value === 'string') {\n        if (info.spaceSeparated) {\n          result = spaces(value);\n        } else if (info.commaSeparated) {\n          result = commas(value);\n        } else if (info.commaOrSpaceSeparated) {\n          result = spaces(commas(value).join(' '));\n        } else {\n          result = parsePrimitive(info, info.property, value);\n        }\n      } else if (Array.isArray(value)) {\n        result = value.concat();\n      } else {\n        result = info.property === 'style' ? style(value) : String(value);\n      }\n\n  if (Array.isArray(result)) {\n    finalResult = [];\n\n    while (++index < result.length) {\n      // @ts-ignore Assume no booleans in array.\n      finalResult[index] = parsePrimitive(info, info.property, result[index]);\n    }\n\n    result = finalResult;\n  } // Class names (which can be added both on the `selector` and here).\n\n\n  if (info.property === 'className' && Array.isArray(properties.className)) {\n    // @ts-ignore Assume no booleans in `className`.\n    result = properties.className.concat(result);\n  }\n\n  properties[info.property] = result;\n}\n/**\n * @param {Array.<Child>} nodes\n * @param {HChild} value\n * @returns {void}\n */\n\n\nfunction addChild(nodes, value) {\n  var index = -1;\n\n  if (value === undefined || value === null) {// Empty.\n  } else if (typeof value === 'string' || typeof value === 'number') {\n    nodes.push({\n      type: 'text',\n      value: String(value)\n    });\n  } else if (Array.isArray(value)) {\n    while (++index < value.length) {\n      addChild(nodes, value[index]);\n    }\n  } else if (typeof value === 'object' && 'type' in value) {\n    if (value.type === 'root') {\n      // @ts-ignore it looks like a root, TSâ€¦\n      addChild(nodes, value.children);\n    } else {\n      nodes.push(value);\n    }\n  } else {\n    throw new Error('Expected node, nodes, or string, got `' + value + '`');\n  }\n}\n/**\n * Parse a single primitives.\n *\n * @param {Info} info\n * @param {string} name\n * @param {HPrimitiveValue} value\n * @returns {HPrimitiveValue}\n */\n\n\nfunction parsePrimitive(info, name, value) {\n  if (typeof value === 'string') {\n    if (info.number && value && !Number.isNaN(Number(value))) {\n      return Number(value);\n    }\n\n    if ((info.boolean || info.overloadedBoolean) && (value === '' || normalize(value) === normalize(name))) {\n      return true;\n    }\n  }\n\n  return value;\n}\n/**\n * @param {HStyle} value\n * @returns {string}\n */\n\n\nfunction style(value) {\n  /** @type {Array.<string>} */\n  var result = [];\n  /** @type {string} */\n\n  var key;\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      result.push([key, value[key]].join(': '));\n    }\n  }\n\n  return result.join('; ');\n}\n/**\n * @param {Array.<string>} values\n * @returns {Object.<string, string>}\n */\n\n\nfunction createAdjustMap(values) {\n  /** @type {Object.<string, string>} */\n  var result = {};\n  var index = -1;\n\n  while (++index < values.length) {\n    result[values[index].toLowerCase()] = values[index];\n  }\n\n  return result;\n}","map":{"version":3,"sources":["/home/bian/Desktop/Summer/a/client/node_modules/hastscript/lib/core.js"],"names":["find","normalize","parseSelector","parse","spaces","commas","buttonTypes","Set","own","hasOwnProperty","core","schema","defaultTagName","caseSensitive","adjust","createAdjustMap","h","selector","properties","children","index","node","key","undefined","type","unshift","tagName","toLowerCase","call","isProperties","addProperty","length","addChild","content","value","name","Array","isArray","has","info","result","finalResult","Number","isNaN","spaceSeparated","commaSeparated","commaOrSpaceSeparated","join","parsePrimitive","property","concat","style","String","className","nodes","push","Error","number","boolean","overloadedBoolean","values"],"mappings":"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","sourcesContent":["/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {Root['children'][number]} Child\n * @typedef {Child|Root} Node\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n *\n * @typedef {Root|Element} HResult\n * @typedef {string|number} HStyleValue\n * @typedef {Object.<string, HStyleValue>} HStyle\n * @typedef {string|number|boolean|null|undefined} HPrimitiveValue\n * @typedef {Array.<string|number>} HArrayValue\n * @typedef {HPrimitiveValue|HArrayValue} HPropertyValue\n * @typedef {{[property: string]: HPropertyValue|HStyle}} HProperties\n *\n * @typedef {string|number|null|undefined} HPrimitiveChild\n * @typedef {Array.<Node|HPrimitiveChild>} HArrayChild\n * @typedef {Node|HPrimitiveChild|HArrayChild} HChild\n */\n\nimport {find, normalize} from 'property-information'\nimport {parseSelector} from 'hast-util-parse-selector'\nimport {parse as spaces} from 'space-separated-tokens'\nimport {parse as commas} from 'comma-separated-tokens'\n\nvar buttonTypes = new Set(['menu', 'submit', 'reset', 'button'])\n\nvar own = {}.hasOwnProperty\n\n/**\n * @param {Schema} schema\n * @param {string} defaultTagName\n * @param {Array.<string>} [caseSensitive]\n */\nexport function core(schema, defaultTagName, caseSensitive) {\n  var adjust = caseSensitive && createAdjustMap(caseSensitive)\n\n  const h =\n    /**\n     * @type {{\n     *   (): Root\n     *   (selector: null|undefined, ...children: HChild[]): Root\n     *   (selector: string, properties: HProperties, ...children: HChild[]): Element\n     *   (selector: string, ...children: HChild[]): Element\n     * }}\n     */\n    (\n      /**\n       * Hyperscript compatible DSL for creating virtual hast trees.\n       *\n       * @param {string|null} [selector]\n       * @param {HProperties|HChild} [properties]\n       * @param {HChild[]} children\n       * @returns {HResult}\n       */\n      function (selector, properties, ...children) {\n        var index = -1\n        /** @type {HResult} */\n        var node\n        /** @type {string} */\n        var key\n\n        if (selector === undefined || selector === null) {\n          node = {type: 'root', children: []}\n          // @ts-ignore Properties are not supported for roots.\n          children.unshift(properties)\n        } else {\n          node = parseSelector(selector, defaultTagName)\n          // Normalize the name.\n          node.tagName = node.tagName.toLowerCase()\n          if (adjust && own.call(adjust, node.tagName)) {\n            node.tagName = adjust[node.tagName]\n          }\n\n          // Handle props.\n          if (isProperties(properties, node.tagName)) {\n            for (key in properties) {\n              if (own.call(properties, key)) {\n                // @ts-ignore `node.properties` is set.\n                addProperty(schema, node.properties, key, properties[key])\n              }\n            }\n          } else {\n            children.unshift(properties)\n          }\n        }\n\n        // Handle children.\n        while (++index < children.length) {\n          addChild(node.children, children[index])\n        }\n\n        if (node.tagName === 'template') {\n          node.content = {type: 'root', children: node.children}\n          node.children = []\n        }\n\n        return node\n      }\n    )\n\n  return h\n}\n\n/**\n * @param {HProperties|HChild} value\n * @param {string} name\n * @returns {value is HProperties}\n */\nfunction isProperties(value, name) {\n  if (\n    value === null ||\n    value === undefined ||\n    typeof value !== 'object' ||\n    Array.isArray(value)\n  ) {\n    return false\n  }\n\n  if (name === 'input' || !value.type || typeof value.type !== 'string') {\n    return true\n  }\n\n  if (Array.isArray(value.children)) {\n    return false\n  }\n\n  if (name === 'button') {\n    return buttonTypes.has(value.type.toLowerCase())\n  }\n\n  return !('value' in value)\n}\n\n/**\n * @param {Schema} schema\n * @param {Properties} properties\n * @param {string} key\n * @param {HStyle|HPropertyValue} value\n * @returns {void}\n */\nfunction addProperty(schema, properties, key, value) {\n  var info = find(schema, key)\n  var index = -1\n  /** @type {HPropertyValue} */\n  var result\n  /** @type {Array.<string|number>} */\n  var finalResult\n\n  // Ignore nullish and NaN values.\n  if (value === undefined || value === null) return\n\n  if (typeof value === 'number') {\n    // Ignore NaN.\n    if (Number.isNaN(value)) return\n\n    result = value\n  }\n  // Booleans.\n  else if (typeof value === 'boolean') {\n    result = value\n  }\n  // Handle list values.\n  else if (typeof value === 'string') {\n    if (info.spaceSeparated) {\n      result = spaces(value)\n    } else if (info.commaSeparated) {\n      result = commas(value)\n    } else if (info.commaOrSpaceSeparated) {\n      result = spaces(commas(value).join(' '))\n    } else {\n      result = parsePrimitive(info, info.property, value)\n    }\n  } else if (Array.isArray(value)) {\n    result = value.concat()\n  } else {\n    result = info.property === 'style' ? style(value) : String(value)\n  }\n\n  if (Array.isArray(result)) {\n    finalResult = []\n\n    while (++index < result.length) {\n      // @ts-ignore Assume no booleans in array.\n      finalResult[index] = parsePrimitive(info, info.property, result[index])\n    }\n\n    result = finalResult\n  }\n\n  // Class names (which can be added both on the `selector` and here).\n  if (info.property === 'className' && Array.isArray(properties.className)) {\n    // @ts-ignore Assume no booleans in `className`.\n    result = properties.className.concat(result)\n  }\n\n  properties[info.property] = result\n}\n\n/**\n * @param {Array.<Child>} nodes\n * @param {HChild} value\n * @returns {void}\n */\nfunction addChild(nodes, value) {\n  var index = -1\n\n  if (value === undefined || value === null) {\n    // Empty.\n  } else if (typeof value === 'string' || typeof value === 'number') {\n    nodes.push({type: 'text', value: String(value)})\n  } else if (Array.isArray(value)) {\n    while (++index < value.length) {\n      addChild(nodes, value[index])\n    }\n  } else if (typeof value === 'object' && 'type' in value) {\n    if (value.type === 'root') {\n      // @ts-ignore it looks like a root, TSâ€¦\n      addChild(nodes, value.children)\n    } else {\n      nodes.push(value)\n    }\n  } else {\n    throw new Error('Expected node, nodes, or string, got `' + value + '`')\n  }\n}\n\n/**\n * Parse a single primitives.\n *\n * @param {Info} info\n * @param {string} name\n * @param {HPrimitiveValue} value\n * @returns {HPrimitiveValue}\n */\nfunction parsePrimitive(info, name, value) {\n  if (typeof value === 'string') {\n    if (info.number && value && !Number.isNaN(Number(value))) {\n      return Number(value)\n    }\n\n    if (\n      (info.boolean || info.overloadedBoolean) &&\n      (value === '' || normalize(value) === normalize(name))\n    ) {\n      return true\n    }\n  }\n\n  return value\n}\n\n/**\n * @param {HStyle} value\n * @returns {string}\n */\nfunction style(value) {\n  /** @type {Array.<string>} */\n  var result = []\n  /** @type {string} */\n  var key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      result.push([key, value[key]].join(': '))\n    }\n  }\n\n  return result.join('; ')\n}\n\n/**\n * @param {Array.<string>} values\n * @returns {Object.<string, string>}\n */\nfunction createAdjustMap(values) {\n  /** @type {Object.<string, string>} */\n  var result = {}\n  var index = -1\n\n  while (++index < values.length) {\n    result[values[index].toLowerCase()] = values[index]\n  }\n\n  return result\n}\n"]},"metadata":{},"sourceType":"module"}