{"ast":null,"code":"'use strict';\n\nmodule.exports = revert;\n\nvar u = require('unist-builder');\n\nvar all = require('./all'); // Return the content of a reference without definition as Markdown.\n\n\nfunction revert(h, node) {\n  var subtype = node.referenceType;\n  var suffix = ']';\n  var contents;\n  var head;\n  var tail;\n\n  if (subtype === 'collapsed') {\n    suffix += '[]';\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']';\n  }\n\n  if (node.type === 'imageReference') {\n    return u('text', '![' + node.alt + suffix);\n  }\n\n  contents = all(h, node);\n  head = contents[0];\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value;\n  } else {\n    contents.unshift(u('text', '['));\n  }\n\n  tail = contents[contents.length - 1];\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix;\n  } else {\n    contents.push(u('text', suffix));\n  }\n\n  return contents;\n}","map":{"version":3,"sources":["/home/bian/Desktop/Summer/a/client/node_modules/mdast-util-to-hast/lib/revert.js"],"names":["module","exports","revert","u","require","all","h","node","subtype","referenceType","suffix","contents","head","tail","label","identifier","type","alt","value","unshift","length","push"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,MAAjB;;AAEA,IAAIC,CAAC,GAAGC,OAAO,CAAC,eAAD,CAAf;;AACA,IAAIC,GAAG,GAAGD,OAAO,CAAC,OAAD,CAAjB,C,CAEA;;;AACA,SAASF,MAAT,CAAgBI,CAAhB,EAAmBC,IAAnB,EAAyB;AACvB,MAAIC,OAAO,GAAGD,IAAI,CAACE,aAAnB;AACA,MAAIC,MAAM,GAAG,GAAb;AACA,MAAIC,QAAJ;AACA,MAAIC,IAAJ;AACA,MAAIC,IAAJ;;AAEA,MAAIL,OAAO,KAAK,WAAhB,EAA6B;AAC3BE,IAAAA,MAAM,IAAI,IAAV;AACD,GAFD,MAEO,IAAIF,OAAO,KAAK,MAAhB,EAAwB;AAC7BE,IAAAA,MAAM,IAAI,OAAOH,IAAI,CAACO,KAAL,IAAcP,IAAI,CAACQ,UAA1B,IAAwC,GAAlD;AACD;;AAED,MAAIR,IAAI,CAACS,IAAL,KAAc,gBAAlB,EAAoC;AAClC,WAAOb,CAAC,CAAC,MAAD,EAAS,OAAOI,IAAI,CAACU,GAAZ,GAAkBP,MAA3B,CAAR;AACD;;AAEDC,EAAAA,QAAQ,GAAGN,GAAG,CAACC,CAAD,EAAIC,IAAJ,CAAd;AACAK,EAAAA,IAAI,GAAGD,QAAQ,CAAC,CAAD,CAAf;;AAEA,MAAIC,IAAI,IAAIA,IAAI,CAACI,IAAL,KAAc,MAA1B,EAAkC;AAChCJ,IAAAA,IAAI,CAACM,KAAL,GAAa,MAAMN,IAAI,CAACM,KAAxB;AACD,GAFD,MAEO;AACLP,IAAAA,QAAQ,CAACQ,OAAT,CAAiBhB,CAAC,CAAC,MAAD,EAAS,GAAT,CAAlB;AACD;;AAEDU,EAAAA,IAAI,GAAGF,QAAQ,CAACA,QAAQ,CAACS,MAAT,GAAkB,CAAnB,CAAf;;AAEA,MAAIP,IAAI,IAAIA,IAAI,CAACG,IAAL,KAAc,MAA1B,EAAkC;AAChCH,IAAAA,IAAI,CAACK,KAAL,IAAcR,MAAd;AACD,GAFD,MAEO;AACLC,IAAAA,QAAQ,CAACU,IAAT,CAAclB,CAAC,CAAC,MAAD,EAASO,MAAT,CAAf;AACD;;AAED,SAAOC,QAAP;AACD","sourcesContent":["'use strict'\n\nmodule.exports = revert\n\nvar u = require('unist-builder')\nvar all = require('./all')\n\n// Return the content of a reference without definition as Markdown.\nfunction revert(h, node) {\n  var subtype = node.referenceType\n  var suffix = ']'\n  var contents\n  var head\n  var tail\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return u('text', '![' + node.alt + suffix)\n  }\n\n  contents = all(h, node)\n  head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift(u('text', '['))\n  }\n\n  tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push(u('text', suffix))\n  }\n\n  return contents\n}\n"]},"metadata":{},"sourceType":"script"}